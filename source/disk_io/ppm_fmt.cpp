/*============================================================================*/
/* Cosmic Ray [Tau] - Dominik Deak                                            */
/*                                                                            */
/*                                                                            */
/*                    Portable Pixmap Format Reader/Saver                     */
/*============================================================================*/


/*---------------------------------------------------------------------------
   Don't include this file if it's already defined.   
  ---------------------------------------------------------------------------*/
#ifndef __PPM_FMT_CPP__
#define __PPM_FMT_CPP__


/*---------------------------------------------------------------------------
   Include libraries and other source files needed in this file.
  ---------------------------------------------------------------------------*/
#include "../_common/std_inc.h"
#include "../mem_data/bitmap.cpp"


/*---------------------------------------------------------------------------
  The PPM file IO class.
  ---------------------------------------------------------------------------*/
class PPM_Class
   {
   /*==== Public Declarations ================================================*/
   public:

   /*-------------------------------------------------------------------------
      Read is not supported.
     -------------------------------------------------------------------------*/
   bool Read(char* FileName, BitmapRec* Bitmap)
      {return false;}

   /*-------------------------------------------------------------------------
      Saves to a PPM file. If the bitmap is a multi-frame image, only the current
      frame will be saved (pointed by Bitmap->FramePtr). Returns true on success.

      FileName     : File name with path to save.
      Bitmap       : Pointer to a BitmapRec data.
      SaveASCII    : If set true the file will be saved in ASCII format
     -------------------------------------------------------------------------*/
   bool Save(char* FileName, BitmapRec* Bitmap, bool SaveASCII)
      {
      if ((FileName == NULL) || (Bitmap == NULL)) {return false;}

      //Check if the bitmap is valid
      if (!Bitmap->Check()) {return false;}

      //-- Open the PPM file --
      FILE* PPM_File = fopen(FileName, "wt");
      if (PPM_File == NULL) {return false;}

      //---- Save the bitmap data in ASCII format ----
      if (SaveASCII)
         {
         //-- Write the file header --
         fprintf(PPM_File, "P3\n#Generated by %s\n%d %d\n255\n\n", Title, Bitmap->U_Res, Bitmap->V_Res);

         int   CharsPerLine = 0;
         byte* PixelPtr = Bitmap->FramePtr;
         while (PixelPtr < Bitmap->FramePtr + Bitmap->Size)
            {
            iColorRec Color;
            Bitmap->Pixel->Read(PixelPtr, &Color); //Read color
      
            CharsPerLine += fprintf(PPM_File, "%d %d %d  ", Color.R, Color.G, Color.B);
            if (CharsPerLine > 50) {fprintf(PPM_File, "\n"); CharsPerLine = 0;}
      
            PixelPtr += Bitmap->BytesPerPixel;
            }
         }

      //---- Save the bitmap data in binary format ----
      else
         {
         //Re-open the file in binary mode
         PPM_File = freopen(FileName, "ab+", PPM_File);
         if (PPM_File == NULL) {return false;}
         fseek(PPM_File, SEEK_END, 0);

         //-- Write the file header --
         fprintf(PPM_File, "P6\n#Generated by %s\n%d %d\n255\n", Title, Bitmap->U_Res, Bitmap->V_Res);

         byte* PixelPtr = Bitmap->FramePtr;
         while (PixelPtr < Bitmap->FramePtr + Bitmap->Size)
            {
            iColorRec Color;
            Bitmap->Pixel->Read(PixelPtr, &Color); //Read color
      
            fwrite(&Color.R, 1, 1, PPM_File);
            fwrite(&Color.G, 1, 1, PPM_File);
            fwrite(&Color.B, 1, 1, PPM_File);
            if (ferror(PPM_File) != 0) 
               {
               printf("PPM_Class::SavePPM( ): File write error.\n");
               goto _SavePPM_ExitError;
               }
      
            PixelPtr += Bitmap->BytesPerPixel;
            }
         }

      //---- Normal exit ----
      if (PPM_File != NULL) {fclose(PPM_File);}
      return true;

      //---- Exit on error ----
      _SavePPM_ExitError:
      if (PPM_File != NULL) {fclose(PPM_File);}
      return false;
      }

   /*==== End of Class =======================================================*/
   };


/*----------------------------------------------------------------------------
  Global Declarations.
  ----------------------------------------------------------------------------*/
PPM_Class PPM;


/*==== End of file ===========================================================*/
#endif
